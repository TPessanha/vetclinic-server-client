package personal.ciai.vetclinic.UnitTests.repositoryTests

import org.junit.jupiter.api.Assertions.assertEquals
import org.junit.jupiter.api.Assertions.assertNotEquals
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.assertAll
import org.junit.jupiter.api.extension.ExtendWith
import org.mockito.Mockito
import org.springframework.beans.factory.annotation.Autowired
import org.springframework.boot.test.context.SpringBootTest
import org.springframework.test.context.junit.jupiter.SpringExtension
import org.springframework.transaction.annotation.Transactional
import personal.ciai.vetclinic.ExampleObjects.exampleObjects.dogExample
import personal.ciai.vetclinic.ExampleObjects.exampleObjects.pigExample
import personal.ciai.vetclinic.model.Pet
import personal.ciai.vetclinic.repository.PetRepository

@ExtendWith(SpringExtension::class)
@SpringBootTest
@Transactional
class PetRepositoryTests {
    @Autowired
    lateinit var pets: PetRepository

    @Test
    fun `basic test on findAll`() {
        assertEquals(pets.findAll().toList(), emptyList<Pet>())
    }

    @Test
    fun `basic test on save and delete`() {
        val pet = pets.save(dogExample)
        assertNotEquals(dogExample.id, pet.id) // the id is different because it is generated by Spring
        assertEquals(dogExample.species, pet.species)

        val savedPet = pets.findById(pet.id).get()

//        assertEquals(dogExample,savedPet)
        assertAll("Is pet the same",
            { assertNotEquals(dogExample.id, savedPet.id) },
            { assertEquals(dogExample.species, savedPet.species) },
            { assertEquals(dogExample.age, savedPet.age) },
            { assertEquals(dogExample.notes, savedPet.notes) },
            { assertEquals(dogExample.physicalDescription, savedPet.physicalDescription) },
            { assertEquals(dogExample.medicalRecord, savedPet.medicalRecord) }
        )

        pets.delete(pet)

        assertTrue(pets.findAll().toList().size == 0)
    }

    fun <T> nonNullAny(t: Class<T>): T = Mockito.any(t)

    @Test
    fun `another test on save and delete`() {
//        val petMock : Pet = mock(Pet::class.java)
//        `when`(petMock.appointments).thenReturn(emptyList())

        val pet0 = pets.save(dogExample)
        assertNotEquals(pet0.id, dogExample.id) // the id is different because it is generated by Spring
        assertEquals(pet0.species, dogExample.species)

        assertEquals(pets.findAll().toList(), listOf(pet0))

        val pet1 = pets.save(pigExample)
        assertNotEquals(pet1.id, ((pigExample.id))) // the id is different because it is generated by Spring
        assertEquals(pet1.species, (pigExample.species))

        assertEquals(pets.findAll().toList(), listOf(pet0, pet1))

        pets.delete(pet0)

        assertTrue(pets.findAll().toList().size == 1)

        pets.delete(pet1)

        assertTrue(pets.findAll().toList().size == 0)
    }
}
